Take small steps.

1. First start with a tests list 
2. What is canary test?
3. Implement at most two more tests and 
4. Minimum code to make those tests to pass. This is a great first step to complete and ask for a review.


Test List:
A. View part

3 main operations:
1. drawView()
a. the method return a board with valid dimensions 
b. desired colored cells and with 
c. correct random cell types 
d. initialize Click event on each Cells

2. clickEventhandler()
a. it should capture correct position of clicked cells
b. cross check the returned position in different class

3. updatedView()
a. need to check correct cell should get updated
b. we should whether to update single cell or entire board


B. Model Test

Board

1.checkBoundary(int x, int y)
a. The method should return a boolean
b. It should check parameter validity( type, positive, not null)
c. It should check paramter is within boundaries parameters(int row, int col)

2.createBoard()
a. randomize the cells and store their position and state in the 2D array
b. should check if each cell has position and state

3. performPlayAction()
a. The method should call the performPlayAction method of respective classes(EmptyCell, Adjacent and Mine)
b. The method should return updated state and type of cells on the Board to the view

4. ifPlayerWon()
a. should return true if all mines are sealed
b. should return true if all cells are exposed except mine cells
c. should return false if mine is exposed

State
1. shouldUpdateState()
a. should return true if unexposed(current) state can be updated to sealed state
b. should return true if sealed(current) state can be updated to unexposed
c. should return false if sealed(current) state can be updated to exposed

C.ICellImplementation

EmptyCell
1. performPlayAction()
a. should be updated to exposed state/sealed state
	if updated to sealed state
		// update count of sealedCellPositions
b. should not update state if clicked again
c. should check adjacent cell
	if adjacent cell is empty type:
		// call performPlayAction() again
	if adjacent cell is adjacent type:
		// call AdjacentCell.performPlayAction()
		// or calculateAdjacentMines() method during initialization
d. should increment exposedCellCount
e. The method should return updated state and type of cell on the Board

MineCell
1. performPlayAction()
a. should be update state 
	1. if updated to exposed state
		// return/update the PlayerStatusFlag
	2. if updated to sealed state
		// update count of sealedCellPositions
b. should be updated to unexposed state if current state is sealed state
c. The method should return updated state and type of cell on the Board

AdjacentCell
1. performPlayAction()
a. should be updated to correct state
	if updated to sealed state
		// update count of sealedCellPositions
b. should have variable to keep count of adjacent mines
c. should increment exposedCellCount




